package com.example.newmap;


import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.os.Looper;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.TextView;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.tasks.OnSuccessListener;
import org.json.JSONObject;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {
    private FusedLocationProviderClient fusedLocationClient;
    private LocationCallback locationCallback;
    private final ExecutorService executor = Executors.newSingleThreadExecutor();
    private TextView locationText;
    private WebView webView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        locationText = findViewById(R.id.locationText);
        Button openWebButton = findViewById(R.id.openWebButton);
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        SSLUtils.disableSSLCertificateChecking();

        // 위치 권한 요청
        ActivityResultLauncher<String[]> requestPermissionLauncher =
                registerForActivityResult(new ActivityResultContracts.RequestMultiplePermissions(), permissions -> {
                    if (Boolean.TRUE.equals(permissions.get(Manifest.permission.ACCESS_FINE_LOCATION))) {
                        startLocationUpdates();
                    }
                });

        requestPermissionLauncher.launch(new String[]{
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION
        });

        // 버튼 클릭 시 크롬에서 웹페이지 열기
        openWebButton.setOnClickListener(v -> {
            //Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://inhamap.n-e.kr"));
            Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://inhacapstone.p-e.kr/"));
            startActivity(browserIntent);
        });
    }
    @SuppressLint("MissingPermission")
    private void startLocationUpdates() {
        LocationRequest locationRequest = LocationRequest.create()
                .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
                .setInterval(1000) // 3초마다 업데이트
                .setFastestInterval(1000); // 최소 1초 간격

        LocationCallback locationCallback = new LocationCallback() {
            @Override
            public void onLocationResult(LocationResult locationResult) {
                if (locationResult == null) {
                    return;
                }
                for (Location location : locationResult.getLocations()) {
                    double latitude = location.getLatitude();
                    double longitude = location.getLongitude();
                    float snr = getMockSNR();

                    locationText.setText("위도: " + latitude + "\n경도: " + longitude + "\nSNR: " + snr);
                    sendLocationToServer(latitude, longitude, snr);
                }
            }
        };

        fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, Looper.getMainLooper());
    }

    private void sendLocationToServer(double lat, double lon, float snr) {
        executor.execute(() -> {
            try {
                //URL url = new URL("https://inhamap.n-e.kr/gps");
                URL url = new URL("https://inhacapstone.p-e.kr/");
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-Type", "application/json");
                conn.setDoOutput(true);

                JSONObject jsonParam = new JSONObject();
                jsonParam.put("latitude", lat);
                jsonParam.put("longitude", lon);
                jsonParam.put("snr", snr);

                OutputStream os = conn.getOutputStream();
                os.write(jsonParam.toString().getBytes());
                os.flush();
                os.close();

                int responseCode = conn.getResponseCode(); // 응답 코드 확인
                System.out.println("Response Code: " + responseCode);  // 로그 추가
                conn.disconnect();

            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    private float getMockSNR() {
        return (float) (10 + Math.random() * 40); // 임시 SNR 값 (10~50 범위 랜덤값)
    }

    @Override
    protected void onResume() {
        super.onResume();
        startLocationUpdates(); // WebView로 인해 중단된 위치 업데이트 다시 시작
    }
}
